# forecast

forecast is a query program for the [forecast.io](https://forecast.io)
API. It provides a command line interface which makes weather data for a
configurable location available in the terminal.

Capabilities include:

* Plotting tables with current, hourly and daily weather conditions
* Rendering barplots of temperature and precepitation curves for hourly
  and daily weather forecasts, sunrise and sunset times for daily
  weather forecasts and many more things
* Dumping of the original JSON weather data

## Dependencies

* [libjson-c](https://github.com/json-c/json-c)
* [libconfig](http://www.hyperrealm.com/libconfig/)
* [libcurl](http://curl.haxx.se/libcurl/) (built with SSL support)
* [libncursesw5](https://www.gnu.org/software/ncurses/)
* [libcrypto](https://www.openssl.org/docs/manmaster/crypto/crypto.html)
  (part of OpenSSL)

The build system uses GNU autoconf and automake.

## Build

After installing all dependencies, this will configure and build the
program:

```sh
./autogen.sh
./configure --prefix=/your/prefix
make
make install
```

## Synopsis

```
Usage:
  forecast [c:dehL:l:m:rv] [OPTIONS]
Options:
  -c|--config            PATH   Configuration file to use
  -d|--dump                     Dump the JSON data and a newline to stdout
  -e|--extend-hourly            Request data for one week instead of two days
                                for hourly forecasts.
  -h|--help                     Print this message and exit
  -L|--location-by-name  NAME   Select a location predefined in the configuration file
  -l|--location          CHOORD Query the weather at this location; CHOORD is a string in the format
                                <latitude>:<longitude> where the choordinates are given as floating
                                point numbers
  -m|--mode              MODE   One of print, print-hourly, plot-hourly, plot-daily, plot-precip-daily,
                                plot-precip-hourly, plot-daylight. Defaults to 'print'
  -r|--request                  By pass the cache if a cache file exists
  -v|--version                  Print program version and exit
```

When using --location, the cache will be bypassed in any case. In
plotting mode, the plot will be shown until you press a key.

## API key

In order to use the API, you need to obtain an API key from forecast.io.
You are able to make 1000 API calls per day free of charge. The
registration interface is [here](https://developer.forecast.io/).

## Configuration file

forecast uses a configuration file in libconfig format. The file is by
default located at
```sh
$HOME/.forecastrc
```
but you may override the location by using the -c flag.

The configuration must contain at least the following settings:

```
# forecast.io API key
apikey = "";

# Default mode for forecast when invoked without any command line
# options. Must be one of print, print-hourly, plot-hourly, plot-daily,
# plot-precip-daily, plot-precip-hourly
op = "print";

# When the last requested data set is >= $max_cache_age seconds old,
# request new data. This will significantly speed up subsequent
# invocations. Set to 0 in order to always bypass the cache.
max_cache_age = 1200;

# If set to true, request data for 7 days instead of 2 (the default)
# when querying hourly weather data, allowing
# plot.hourly.succeeding_hours to be set to up to 168 hours instead of
# just 48. This approximately doubles the request size.
extend_hourly = false;

# File to save cache data to; should be in a location your user has write
# access to. The path is used as a template and must contain the %s
# character sequence EXACTLY once, as the string is used as an input to
# snprintf(3). %s will be replaced with a MD5 hash of the location in
# order to be able to manage cachefiles for multiple locations.
cache_file = "/tmp/forecast.%s.cache";

# Location coordinates as doubles. These will be used as the default
# when no named location mapping was specified on the command line.
location: {
  latitude = 52.5161;
  longitude = 13.3770;
};

# Pre-defined locations which can be referenced by name using the
# -L/--location-by-name optionsoptions. The coordinates of the default
# location setting will be replaced with the ones defined in the array.
# WARNING: The cache handling routine does not yet accommodate this
# setting well; the cache will be refreshed whenever the named
# location's coordniates defer from the default location. This will get
# fixed ASAP.
location_map: {
  Berlin: [ 52.5161,  13.3770 ];
  Tokyo:  [ 35.7000, 139.7667 ];
};

# Plot appearance
plot: {

  # The plot's y axis will extend to +/- this value in terminal lines
  height = 10;

  bar: {

    # Bar width in columns
    width = 5;

    # Primary bar color
    # One of: WHITE, BLACK, RED, GREEN, CYAN, BLUE, MAGENTA, YELLOW
    # Name must be uppercase
    color = "RED";

    # Secondary bar color in overlay plots (currently only plot-daily)
    overlay_color = "BLACK";

  };

  legend: {

    # Color used for labels
    color = "WHITE";

    # Color used for highlight/color accents in text
    texthighlight_color = "RED";

  };

  hourly: {

    # plot-hourly: Consecutive hours to plot
    succeeding_hours = 30;

    # Bar labels, see strftime(3) for possible formats
    label_format = "%H:%M";

  };

  daily: {

    # Bar labels, see strftime(3) for possible formats
    label_format = "%d%b";

  };

  precipitation: {
    # Bar color used in plot-precip-daily, plot-precip-hourly
    bar_color = "BLUE";
  };

  daylight: {
    # This is a horizontal plot - fraction of the terminal width to
    # occupy
    width_frac = 0.80;

    # Maximum number of columns to occupy. This is useful for keeping
    # the plot readable on very large terminal windows 
    width_max = 72;
  };

};
```

The best way to create the config file is to copy and edit the provided
forecastrc.example.

If available, command line parameters take precedence over the config
file settings.

As for the meaning of the keys, read the comments in forecastrc.example.

## Example plots


Daily overlay forecast plot (-m plot-daily), with the label format
"%d%b", showing the min/max temperatures on each day:
![](https://raw.githubusercontent.com/2ion/forecast/gh-pages/ex4.png)

Hourly forecast plot (-m plot-hourly), with the label format "%H:%M":
![](https://raw.githubusercontent.com/2ion/forecast/gh-pages/ex3.png)

## License

GNU GPL v3+
